experiment_setup_parameters:
  'number_of_samples': 30
  'number_of_runs': 1
  'duration': 370
  'monitoring_samples': 370 # needs to be smaller than duration
  'random_seed': 19
  'initialAs': 10
fixed_parameters_region_specific:
  populations:
    'IL': 12830632
    'NMH_catchment': 315000
    'Chicago': 2700000
    'EMS_1': 736370
    'EMS_2': 1124941
    'EMS_3': 619366
    'EMS_4': 698886
    'EMS_5': 417674
    'EMS_6': 788985
    'EMS_7': 1814891
    'EMS_8': 1673408
    'EMS_9': 1970275
    'EMS_10': 1052839
    'EMS_11': 2716921
  startdate:
    'NMH_catchment': 2020-02-28
    'Chicago': 2020-02-20  
    'IL': 2020-02-13  # used for spatial model 
    # To specify a range of dates instead of a single date:
    # 'EMS_1': [2020-02-26, 2020-02-28]
    # This would mean using all dates between 2020-02-26 and 2020-02-28, inclusive.                                                           
    'EMS_1': 2020-02-26       
    'EMS_2': 2020-02-25  
    'EMS_3': 2020-02-16     
    'EMS_4': 2020-02-18  
    'EMS_5': 2020-02-22     
    'EMS_6': 2020-02-21  
    'EMS_7': 2020-02-16           
    'EMS_8': 2020-02-24       
    'EMS_9': 2020-02-25        
    'EMS_10': 2020-02-20      
    'EMS_11': 2020-02-22       
fixed_parameters_global:
sampled_parameters:
  'time_to_infectious':
    np.random: uniform
    function_kwargs: {'low': 3.4, 'high':4.5}
  'time_to_symptoms':
    np.random: uniform
    function_kwargs: {'low': 2.4, 'high': 3.5}
  'time_to_hospitalization':
    np.random: uniform
    function_kwargs: {'low':3, 'high':6}
  'time_to_critical':
    np.random: uniform
    function_kwargs: {'low':4, 'high':6}
  'time_to_death':
    np.random: uniform
    function_kwargs: {'low':4, 'high':6}
  ### DELAY BETWEEN ONSET OF SYMPTOMS AND BEING TESTED 
  ### Parameter values are substracted from the time values above and need to be >=1
  'time_to_detection':
    np.random: uniform
    function_kwargs: {'low':2.0, 'high':2.0}
  ### Optionally use separate time to detection (use matching emodl))
  'time_to_detection_As':
    np.random: uniform
    function_kwargs: {'low':1.0, 'high':6.0}
  'time_to_detection_Sym':
    np.random: uniform
    function_kwargs: {'low':7.0, 'high':7.0}
    #function_kwargs: {'low':2.0, 'high':5.0}
  'time_to_detection_Sys':
    np.random: uniform
    function_kwargs: {'low':2.0, 'high':2.0}
  ### RECOVERY TIMES 
  'recovery_time_asymp':
    np.random: uniform
    function_kwargs: {'low':7, 'high':10}
  'recovery_time_mild':
    np.random: uniform
    function_kwargs: {'low':9, 'high':9}
    #function_kwargs: {'low':7, 'high':10}
  'recovery_time_hosp':
    np.random: uniform
    function_kwargs: {'low':4, 'high':6}
  'recovery_time_crit':
    np.random: uniform
    function_kwargs: {'low':8, 'high':10}
  'fraction_symptomatic':
    np.random: uniform
    function_kwargs: {'low':0.5, 'high':0.7}
  'fraction_severe':
    np.random: uniform
    function_kwargs: {'low':0.06, 'high':0.1}
  'fraction_critical':
    np.random: uniform
    function_kwargs: {'low':0.20, 'high':0.35}
  'cfr': 
    np.random: uniform
    function_kwargs: {'low':0.01, 'high':0.03}
  'reduced_inf_of_det_cases':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0.3}
  ## DETECTION RATES 
  'd_Sym':
    np.random: uniform
    function_kwargs: {'low':0.01, 'high':0.05}
  'd_Sys':
    np.random: uniform
    function_kwargs: {'low':0.00, 'high':0.0185} 
  'd_As':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0}
  'd_P':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0}  
  ## TIME EVENT EFFECT SIZE PARAMETER  
  ### Reduce Ki due to stay-at-home policy
  'social_multiplier_1':
    np.random: uniform
    function_kwargs: {'low':0.7, 'high':0.9}
  'social_multiplier_2':
    np.random: uniform
    function_kwargs: {'low':0.2, 'high':0.5}
  'social_multiplier_3':
    np.random: uniform
    function_kwargs: {'low':0.08, 'high':0.08}        
  ### Increased testing - increased detectioon of severe symptomatic infections
  ### (only used if corresponding emodl is defined)    
  'd_Sys_incr1':
    np.random: uniform
    function_kwargs: {'low':0.0726, 'high':0.157}
  'd_Sys_incr2':
    np.random: uniform
    function_kwargs: {'low':0.335, 'high':0.422}
  'd_Sys_incr3':
    np.random: uniform
    function_kwargs: {'low':0.516, 'high':0.778}
  'd_Sys_incr4':
    np.random: uniform
    function_kwargs: {'low':0.565, 'high':0.835}
  'd_Sys_incr5':
    np.random: uniform
    function_kwargs: {'low':0.682, 'high':0.835}
  'd_Sys_incr6':
    np.random: uniform
    function_kwargs: {'low':0.95, 'high':1}
  ### d_Sym
  'd_Sym_incr1':
    np.random: uniform
    function_kwargs: {'low':0.020, 'high':0.067}
  'd_Sym_incr2':
    np.random: uniform
    function_kwargs: {'low':0.056, 'high':0.099}
  'd_Sym_incr3':
    np.random: uniform
    function_kwargs: {'low':0.081, 'high':0.143}
  'd_Sym_incr4':
    np.random: uniform
    function_kwargs: {'low':0.087, 'high':0.150}
  'd_Sym_incr5':
    np.random: uniform
    function_kwargs: {'low':0.103, 'high':0.150}
  'd_Sym_incr6':
    np.random: uniform
    function_kwargs: {'low':0.140, 'high':0.170}
  ### fraction_critical
  'fraction_critical_incr1':
    np.random: uniform
    function_kwargs: {'low':0.13, 'high':0.23}
  'fraction_critical_incr2':
    np.random: uniform
    function_kwargs: {'low':0.07, 'high':0.12}
  'fraction_critical_incr3':
    np.random: uniform
    function_kwargs: {'low':0.05, 'high':0.09}
intervention_parameters:
  ### TIME-VARYING PARAMETER - EFFECT SIZE
  ### Reset Ki to defined proporions of it's initial value  
  ### (only used if corresponding emodl is defined)    
  'backtonormal_multiplier':
    np.random: uniform
    # Add 'size' in function_kwargs to have multiple values instead of just one
    function_kwargs: {'low':0.10, 'high':0.10}
  ### Gradual reopening (time-wise)
  ### Default in the yaml is a linear increase, scaling  reopening_multiplier_4 by 0.25, 0.5, 0.75 and 1
  #'reopening_multiplier_1':
  #  np.random: uniform
  #  function_kwargs: {'low':0.02, 'high':0.02}
  #'reopening_multiplier_2':
  #  np.random: uniform
  #  function_kwargs: {'low':0.04, 'high':0.04}
  #'reopening_multiplier_3':
  #  np.random: uniform
  #  function_kwargs: {'low':0.06, 'high':0.06}
  'reopening_multiplier_4':
    np: linspace
    function_kwargs: {'start':0.08, 'stop':0.20, 'num' : 1}
  ### INCREASE DETECTION RATES of asymptomatic, presymptomatic and mild infections
  'd_AsP_ct1':
    np.random: uniform
    function_kwargs: {'low':0, 'high':0}
  'd_Sym_ct1':
    np.random: uniform
    function_kwargs: {'low':0.170, 'high':0.170}
  'change_testDelay_As_1':
    np: linspace
    function_kwargs: {'start':2, 'stop':7, 'num' : 1}
  'change_testDelay_Sym_1':
    np: linspace
    function_kwargs: {'start':2, 'stop':7, 'num' : 1}
    #function_kwargs: {'start':2, 'stop':7, 'num' : 11}
  #### Change 'isolation success' in contact tracing simulations
  'reduced_inf_of_det_cases_ct1':
    np.random: uniform
    function_kwargs: {'low':0, 'high':1}
time_parameters:
  ### TIME-VARYING PARAMETER  - DATES
  ### Reduce Ki due to stay-at-home policy 
  'socialDistance_time1':
    custom_function: DateToTimestep
    # To use multiple dates instead of just one date, use an array of dates,
    # e.g., function_kwargs: {'dates': [2020-03-12, 2020-03-13]}
    function_kwargs: {'dates': 2020-03-12}
  'socialDistance_time2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-17}
  'socialDistance_time3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-21}
  'socialDistance_time4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-21}
  'socialDistance_time5':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-21}
  ### Reset Ki to defined proporions of it's initial value  
  ### (only used if corresponding emodl is defined)    
  'socialDistanceSTOP_time':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-01}
  ### Gradual reopening (time-wise)
  'gradual_reopening_time1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-05}
  'gradual_reopening_time2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-12}        
  'gradual_reopening_time3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-19}    
  'gradual_reopening_time4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-07-26}  
  ### Increased testing - increased detectioon of severe symptomatic infections
  ### (only used if corresponding emodl is defined)
  ### Use fixed dates or define detection time relative to  socialDistance_time3
  'detection_time_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-14}
  'detection_time_2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-21}
  'detection_time_3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-03-28} 
  'detection_time_4':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-04} 
  'detection_time_5':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-18} 
  'detection_time_6':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-05-01}
  'crit_time_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-01} 
  'crit_time_2':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-05-01} 
  'crit_time_3':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-01} 
  ### Contact tracing - increase detectioon of asymptomatic, presymptomatic and mild infections
  ### Note detection of asymptomatic and presymptomatic assumed to be the same
  ### (only used if corresponding emodl is defined)
  'contact_tracing_start_1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-06-01}
  ## stop after simulation end to simulate indefinite contact tracing
  'contact_tracing_stop1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2022-05-30}
  'change_testDelay_time1':
    custom_function: DateToTimestep
    function_kwargs: {'dates': 2020-04-15}
    #function_kwargs: {'dates': [2020-04-15, 2020-05-15, 2020-06-15, 2020-07-15, 2020-08-15, 2020-09-15]}
fitted_parameters:
  Kis:
    'NMH_catchment':
      np: linspace
      function_kwargs: {'start': 1.5e-6, 'stop': 2.0e-6, 'num': 1}
    'Chicago':
      np: linspace
      function_kwargs: {'start': 2.0e-7, 'stop': 3.0e-7, 'num': 1}
    'IL':
      np: linspace
      function_kwargs: {'start': 6.0e-8, 'stop': 9.0e-8, 'num': 1}
    'EMS_1':
      np: linspace
      function_kwargs: {'start': 0.592, 'stop': 0.592, 'num': 1}
    'EMS_2':
      np: linspace
      function_kwargs: {'start': 0.654, 'stop': 0.654, 'num': 1}
    'EMS_3':
      np: linspace
      function_kwargs: {'start': 0.381, 'stop': 0.381, 'num': 1}
    'EMS_4':
      np: linspace
      function_kwargs: {'start': 0.571, 'stop': 0.571, 'num': 1}
    'EMS_5':
      np: linspace
      function_kwargs: {'start': 0.501, 'stop': 0.501, 'num': 1}
    'EMS_6':
      np: linspace
      function_kwargs: {'start': 0.501, 'stop': 0.501, 'num': 1}
    'EMS_7':
      np: linspace
      function_kwargs: {'start': 0.716, 'stop': 0.716, 'num': 1}
    'EMS_8':
      np: linspace
      function_kwargs: {'start': 0.897, 'stop': 0.897, 'num': 1}
    'EMS_9':
      np: linspace
      function_kwargs: {'start': 0.807, 'stop': 0.807, 'num': 1}
    'EMS_10':
      np: linspace
      function_kwargs: {'start': 0.754, 'stop': 0.754, 'num': 1}
    'EMS_11':
      np: linspace
      function_kwargs: {'start': 1.020, 'stop': 1.020, 'num': 1}
